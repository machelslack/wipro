'use strict';

(function () {
  'use strict';

  var app = {
    todaysDate: new Date(),
    isLoading: true,
    forcastData: {},
    spinner: document.querySelector('.loader'),
    cardTemplate: document.querySelector('.cardTemplate'),
    container: document.querySelector('.main'),
    daysOfWeek: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
  };

  app.updateForecastCard = function (data) {

    var dataLastUpdated = new Date(data.created);
    var sunrise = data.channel.astronomy.sunrise;
    var sunset = data.channel.astronomy.sunset;
    var current = data.channel.item.condition;
    var humidity = data.channel.atmosphere.humidity;
    var wind = data.channel.wind;
    app.cardTemplate.querySelector('.description').textContent = current.text;
    app.cardTemplate.querySelector('.date').textContent = current.date;
    app.cardTemplate.querySelector('.current .icon').classList.add(app.getIconClass(current.code));
    app.cardTemplate.querySelector('.current .temperature .value').textContent = Math.round(current.temp);
    app.cardTemplate.querySelector('.current .sunrise').textContent = sunrise;
    app.cardTemplate.querySelector('.current .sunset').textContent = sunset;
    app.cardTemplate.querySelector('.current .humidity').textContent = Math.round(humidity) + '%';
    app.cardTemplate.querySelector('.current .wind .value').textContent = Math.round(wind.speed);
    app.cardTemplate.querySelector('.current .wind .direction').textContent = wind.direction;
    var nextDays = cardTemplate.querySelectorAll('.future .oneday');
    var today = new Date();
    today = today.getDay();
    for (var i = 0; i < 5; i++) {
      var nextDay = nextDays[i];
      var daily = data.channel.item.forecast[i];
      if (daily && nextDay) {
        nextDay.querySelector('.date').textContent = app.daysOfWeek[i + today];
        nextDay.querySelector('.icon').classList.add(app.getIconClass(daily.code));
        nextDay.querySelector('.temp-high .value').textContent = Math.round(daily.high);
        nextDay.querySelector('.temp-low .value').textContent = Math.round(daily.low);
      }
    }
    if (app.isLoading) {
      app.spinner.setAttribute('hidden', true);
      app.container.removeAttribute('hidden');
      app.isLoading = false;
    }
  };

  app.getIconClass = function (weatherCode) {
    // Weather codes: https://developer.yahoo.com/weather/documentation.html#codes
    weatherCode = parseInt(weatherCode);
    switch (weatherCode) {
      case 25:
      case 32:
      case 33:
      case 34:
      case 36:
      case 3200:
        return 'clear-day';
      case 0:
      case 1:
      case 2:
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 17:
      case 35:
      case 40:
        return 'rain';
      case 3:
      case 4:
      case 37:
      case 38:
      case 39:
      case 45:
      case 47:
        return 'thunderstorms';
      case 5:
      case 7:
      case 13:
      case 14:
      case 16:
      case 18:
      case 41:
      case 42:
      case 43:
      case 46:
        return 'snow';
      case 15:
      case 19:
      case 20:
      case 21:
      case 22:
        return 'fog';
      case 24:
      case 23:
        return 'windy';
      case 26:
      case 27:
      case 28:
      case 31:
        return 'cloudy';
      case 29:
      case 30:
      case 44:
        return 'partly-cloudy-day';
    }
  };

  var initialWeatherForecast = {
    key: '2459115',
    label: 'New York, NY',
    created: '2016-07-22T01:00:00Z',
    channel: {
      astronomy: {
        sunrise: "5:43 am",
        sunset: "8:21 pm"
      },
      item: {
        condition: {
          text: "Windy",
          date: "Thu, 21 Jul 2016 09:00 PM EDT",
          temp: 56,
          code: 24
        },
        forecast: [{ code: 44, high: 86, low: 70 }, { code: 44, high: 94, low: 73 }, { code: 4, high: 95, low: 78 }, { code: 24, high: 75, low: 89 }, { code: 24, high: 89, low: 77 }, { code: 44, high: 92, low: 79 }, { code: 44, high: 89, low: 77 }]
      },
      atmosphere: {
        humidity: 56
      },
      wind: {
        speed: 25,
        direction: 195
      }
    }
  };

  app.getForcast = function (city) {

    var url = 'http://api.openweathermap.org/data/2.5/forecast?q=' + city + '&mode=json&appid=2bd757f23ca948f1953dc3f99d6b3c57';

    var xhr = new XMLHttpRequest();
    xhr.onload = function () {

      app.forcastData = JSON.parse(this.responseText);
      app.decontructData(app.forcastData);
    };

    xhr.open('GET', url, true);
    xhr.send();
  };

  app.decontructData = function (data) {
    var fiveDays = data.list;

    var days = [];

    var _loop = function _loop(counter) {

      var marker = app.todaysDate.getDate() + counter;

      days.push(fiveDays.filter(function (element) {

        var date = new Date(element.dt_txt).getDate();

        return date === marker;
      }));
    };

    for (var counter = 0; counter < 5; counter++) {
      _loop(counter);
    };

    app.updateForecastCard(app.initialiseForecast(days));
  };

  app.initialiseForecast = function (days) {

    var forecast = [];

    days.forEach(function (element, index) {

      var min = 0,
          max = 0,
          item = "",
          compare = -1,
          current = {},
          weather = [],
          counts = {};

      var dayArray = element;

      dayArray.forEach(function (innerElement, index) {

        var marker = index + 1;

        marker < dayArray.length ? app.todaysDate <= new Date(innerElement.dt_txt) || app.todaysDate >= new Date(innerElement.dt_txt) && app.todaysDate <= new Date(dayArray[marker].dt_txt) ? current = innerElement : null : null;

        index === 0 ? min = innerElement.main.temp_min : min = innerElement.main.temp_min <= min ? min : innerElement.main.temp_min;

        index === 0 ? max = innerElement.main.temp_max : max = innerElement.main.temp_max >= max ? max : innerElement.main.temp_max;

        var code = innerElement.weather[0].icon;

        counts[code] = counts[code] === undefined ? 1 : counts[code] + 1;

        counts[code] > compare ? (compare = counts[code], item = { current: current, code: innerElement.weather[0].icon.replace(/[a-z]/, ''),

          high: (max - 273.15) * 9 / 5 + 32,

          low: (min - 273.15) * 9 / 5 + 32 }) : null;
      });

      forecast.push(item);
    });

    var initialWeatherForecast = {

      key: app.forcastData.city.id,
      label: app.forcastData.city.name,
      created: new Date(),
      channel: {
        astronomy: {
          sunrise: "",
          sunset: ""
        },
        item: {
          condition: {
            text: forecast[0].current.weather[0].main,
            date: new Date(forecast[0].current.dt_txt),
            temp: (forecast[0].current.main.temp - 273.15) * 9 / 5 + 32,
            code: forecast[0].current.weather[0].icon.replace(/[a-z]/, '')
          },
          forecast: forecast
        },
        atmosphere: {
          humidity: forecast[0].current.main.humidity
        },
        wind: {
          speed: forecast[0].current.wind.speed,
          direction: ""
        }
      }
    };

    return initialWeatherForecast;
  };

  app.getForcast('London');

  //, data => {app.updateForecastCard(decontructData(data));}
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
